preamble:
	// missing preamble

//public fib(Arg0: u64): u64 {
fib:
       proto 1 1	// N = 1; O = 1
	   // il calee fa push delle locals che la subroutine usa nello scratch space
	   // in questo caso Ã¨ 1 sola: sapere quante sono richiede una passata di pre-analisi della subroutine in Move bytecode
	   // sia Y l'insieme degli indici I nelle CopyLoc[I]/MoveLoc[I]/StLoc[I], 
	   // allora il numero di locals L = max(Y) - N + 1, dove N = #args
	   load 0
	0: frame_dig -1
	1: pushint 2
	2: <
	3: bnz 7

	4: pushint 1
	5: store 0	// se N = #args, allora StLoc[I] diventa 'store (I - N)'
	6: b 17

	7: frame_dig -1	// Arg0
	8: pushint 1
	9: -
	10: callsub fib		
	11: frame_dig -1	// Arg0
	12: pushint 2
	13: -
	14: callsub fib		
	15: +
	16: store 0
	17: load 0
	18: // prima dell'uscita ripristiniamo le locals dello scratch space del caller
		  store 0
	    retsub


//public loop1() {
loop1:
       proto 0 0	// N = 0; O = 0
	   load 0		// push di 1 local
	0: pushint 0
	1: store 0
	2: load 0
	3: pushint 10
	4: <
	5: bnz 12

	6: b 7

	7: load 0
	8: pushint 1
	9: +
	10: store 0
	11: b 2

	12: pushint 10
	13: callsub loop2		
	14: store 0		// restore di 1 local
	    retsub


//public loop2(Arg0: u64) {
loop2:
	   proto 1 0	// N = 1; O = 0
	0: frame_dig -1
	1: pushint 1
	2: -
	3: frame_bury -1
	4: frame_dig -1
	5: pushint 0
	6: <=
	7: bnz 9
	8: b 10

	9: b 0
	10: retsub


//public loop3(Arg0: u64, Arg1: u64, Arg2: u64) {
loop3:
	   proto 3 2	   
	   load 0	// push di 2 locals
	   load 1
	0: frame_dig -3
	1: pushint 1
	2: -
	3: frame_bury -3
	4: frame_dig -2
	5: frame_dig -1
	6: +
	7: store 0
	8: frame_dig -1
	9: frame_dig -3
	10: -
	11: store 1
	12: frame_dig -3
	13: pushint 0
	14: >
	15: bnz 17
	16: b 18
	17: b 0

	18: frame_dig -3
	19: load 0
	20: load 1
	21: +
	22: load 0
	23: load 1
	24: -
	25: callsub loop3	
	26: store 3
	27: frame_bury -2
	28: load 3
	29: frame_bury -1
	30: frame_dig -2 
	31: frame_dig -1
	32: store 1		// restore di 2 locals
		store 0
	    retsub
}
